getwd()
mtcars
mtcars %>% mutate(fact = ifelse(mph > 30, 1,2))
library(tidyverse)
mtcars %>% mutate(fact = ifelse(mph > 30, 1,2))
mtcars %>% mutate(fact = ifelse(mpg > 30, 1,2))
mtcars %>% mutate(fact = ifelse(mpg > 20, "a","b"))
new <- mtcars %>% mutate(fact = ifelse(mpg > 20, "a","b"))
new %>% filter(str_detect(fact, ""))
new %>% filter(str_detect(fact, "1"))
new %>% filter(str_detect(fact, ""))
shiny::runApp()
install.packages("shinythemes")
install.packages("hrbrthemes")
install.packages("DT")
install.packages("readxl")
install.packages("plotly")
runApp()
runApp()
library(shiny)
library(readxl)
library(shinythemes)
library(tidyverse)
library(DT)
library(plotly)
library(hrbrthemes)
# library(rintrojs)
install.packages("hrbrthemes")
library(shiny)
library(readxl)
library(shinythemes)
library(tidyverse)
library(DT)
library(plotly)
library(hrbrthemes)
# library(rintrojs)
install.packages("devtools")
devtools::install_github("hrbrmstr/hrbrthemes")
install_github('andreacirilloac/updateR')
devtools::install_github('andreacirilloac/updateR')
library(updateR)
?updateR
updateR()
library(hrbrthemes)
runApp()
install.packages("tidycensus")
runApp()
edu <- readRDS("dta/edu_state.RDS")
edu
poverty <- readRDS("dta/poverty_state.RDS")
poverty
poverty$estimate_type
poverty$estimate_type %>% table
poverty$estimate_type
poverty <- readRDS("dta/poverty_state.RDS")
poverty
edu
edu$estimate_type
edu$estimate_type %>% unique
edu$estimate_type %>% table
dta %>% filter(group = "Black")
edu
edu %>% filter(group == "Black alone")
edu %>% filter(group == "Black Alone")
edu %>% filter(group == "Black Alone") %>% pull(estimate_type) %>% table
dta <- read_rds("dta/edu_state.RDS")
dta %>%
filter(group ==input$group) %>%
filter(topic_type == input$topic_type) %>%
select(NAME,topic_type,estimate_type,estimate) %>%
rename(Geography = NAME)
runApp()
runApp()
runApp()
runApp()
runApp()
topic_choices
topic_choices <- read_csv("ui_options.csv")
topic_choices
topic_choices <- read_csv("ui_options.csv")
runApp()
topic_choices <- read_csv("ui_options.csv")
runApp()
mtcars
val  <- 30
mtcars %>% filter(mpg > val)
runApp()
runApp()
string <- "two words"
str_split(string)
str_split(string, " ")
str_split(string, " ")[[1]]
str_split(string, " ")[[1]][2]
runApp()
runApp()
str_split(string, " ")
str_split(NULL, " ")
str_split(character(0), " ")
topic_choices <- read_csv("ui_options.csv", col_types = "cccc")
runApp()
runApp()
topic_choices <- read_csv("ui_options.csv", col_types = "cccc")
topic_choices <- read_csv("ui_options.csv", col_types = "ccccc")
topic_choices
runApp()
runApp()
edu
edu %>% filter(group == "NHPI Alone", topic_type == "Less than HS")
edu %>% filter(group == "NHPI Alone", topic_type == "Less than HS") %>% select(NAME, estimate_type, topic_type, estimate)
edu %>% filter(group == "NHPI Alone", topic_type == "Less than HS") %>% select(NAME, estimate_type, topic_type, estimate) %>% rename(Geography = NAME) %>% spread(estimate_type, estimate)
runApp()
edu
edu %>% filter(group == "NHPI Alone", topic_type == "Less than HS") %>% select(NAME, estimate_type, topic_type, estimate) %>% slice(1,53)
edu %>% filter(group == "NHPI Alone", topic_type == "Less than HS") %>% select(NAME, estimate_type, topic_type, estimate) %>% slice(1,53, 105)
edu %>% filter(group == "NHPI Alone", topic_type == "Less than HS") %>% select(NAME, estimate_type, topic_type, estimate)
runApp()
edu <- readRDS("data being used.RDS")
edu
edu %>% filter(Geography == "Alabama")
readRDS("dta/edu_state.RDS")
readRDS("dta/edu_state.RDS") %>% filter(group == "NHPI Alone", topic_type == "Less than HS")
readRDS("dta/edu_state.RDS") %>% filter(group == "NHPI Alone", topic_type == "Less than HS") %>% arrange(NAME)
dta
edu
edu$estimate_type
edu
readRDS("dta/edu_state.RDS") %>% filter(group == "NHPI Alone", topic_type == "Less than HS") %>% arrange(NAME)
readRDS("dta/edu_state.RDS") %>% filter(group == "NHPI Alone", topic_type == "Less than HS")
print("he")
print("he", "ho")
runApp()
runApp()
dta <- readRDS("dta/LEP_state.RDS")
dta
dta$estimate_type %>% table
dta %>% filter(group == "NHPI Alone", topic_type == "Limited English Proficiency")
dta$topic_type %>% table
dta %>% filter(group == "NHPI Alone", topic_type == "speak another language")
dta %>% filter(group == "NHPI Alone", topic_type == "speak another language") %>% pull(estimate_type) %>% table
runApp()
dta
dta$topic_type %>% table
readRDS("LEP_county.RDS")$topic_type %>% table
readRDS("dta/LEP_county.RDS")$topic_type %>% table
readRDS("dta/LEP_district.RDS")
readRDS("dta/LEP_district.RDS")$topic_type %>% table
runApp()
runApp()
dta <- readRDS("dta/poverty_national.RDS")
dta
dta <- readRDS("dta/poverty_state.RDS")
dta$topic_type %>% table
runApp()
runApp()
runApp()
runApp()
readRDS("debugging object.RDS")
readRDS("debugging object.RDS")[[1]]
readRDS("debugging object.RDS")[1]
runApp()
runApp()
runApp()
runApp()
runApp()
dta
readRDSfilename
filename
readRDS("edu_national.RDS")
edu <- readRDS("dta/edu_county.RDS")
edu
edu %>% filter(group == "Black Alone")
edu %>% filter(group == "Black Alone", topic_type == "Less than HS") %>% select(NAME,estimate_type,topic_type,estimate) %>%
rename(Geography = NAME) %>%
spread(estimate_type, estimate) %>%
rename(`Total` = count,
`Share` = prop,
`Estimate` = topic_type)
dta <- edu %>% filter(group == "Black Alone", topic_type == "Less than HS") %>% select(NAME,estimate_type,topic_type,estimate) %>%
rename(Geography = NAME) %>%
spread(estimate_type, estimate) %>%
rename(`Total` = count,
`Share` = prop,
`Estimate` = topic_type)
dta
make_meta <- function(type, dta){
high <- arrange(dta, -Total) %>% slice(1)
low <- arrange(dta, Total) %>% slice(1)
highshare <- arrnage(dta, -Share) %>% slice(1)
lowshare <- arrnage(dta, Share) %>% slice(1)
tribble(~var, ~mean, ~median, ~sd, ~high, ~low, ~avgshare, ~highshare, ~lowshare,
type, mean(dta$Total, na.rm=T),
median(dta$Total, na.rm=T),
sd(dta$Total, na.rm=T),
paste(high$Geography[1], "with", high$Total[1], "people.", sep = " "),
paste0(low$Geography[1], "with", low$Total[1], "people.", sep = " "),
mean(dta$Share, na.rm=T),
paste0(highshare$Geography[1], " with ", lowshare$Share[1] * 100, "%."),
paste0(lowshare$Geography[1], " with ", lowshare$Share[1] * 100, "%.")
)
}
make_meta("Less than HS", dta)
make_meta <- function(type, dta){
high <- arrange(dta, -Total) %>% slice(1)
low <- arrange(dta, Total) %>% slice(1)
highshare <- arrange(dta, -Share) %>% slice(1)
lowshare <- arrnage(dta, Share) %>% slice(1)
tribble(~var, ~mean, ~median, ~sd, ~high, ~low, ~avgshare, ~highshare, ~lowshare,
type, mean(dta$Total, na.rm=T),
median(dta$Total, na.rm=T),
sd(dta$Total, na.rm=T),
paste(high$Geography[1], "with", high$Total[1], "people.", sep = " "),
paste0(low$Geography[1], "with", low$Total[1], "people.", sep = " "),
mean(dta$Share, na.rm=T),
paste0(highshare$Geography[1], " with ", lowshare$Share[1] * 100, "%."),
paste0(lowshare$Geography[1], " with ", lowshare$Share[1] * 100, "%.")
)
}
make_meta("Less than HS", dta)
make_meta <- function(type, dta){
high <- arrange(dta, -Total) %>% slice(1)
low <- arrange(dta, Total) %>% slice(1)
highshare <- arrange(dta, -Share) %>% slice(1)
lowshare <- arrange(dta, Share) %>% slice(1)
tribble(~var, ~mean, ~median, ~sd, ~high, ~low, ~avgshare, ~highshare, ~lowshare,
type, mean(dta$Total, na.rm=T),
median(dta$Total, na.rm=T),
sd(dta$Total, na.rm=T),
paste(high$Geography[1], "with", high$Total[1], "people.", sep = " "),
paste0(low$Geography[1], "with", low$Total[1], "people.", sep = " "),
mean(dta$Share, na.rm=T),
paste0(highshare$Geography[1], " with ", lowshare$Share[1] * 100, "%."),
paste0(lowshare$Geography[1], " with ", lowshare$Share[1] * 100, "%.")
)
}
make_meta("Less than HS", dta)
meta <- make_meta("Less than HS", dta)
meta$low
make_meta <- function(type, dta){
high <- arrange(dta, -Total) %>% slice(1)
low <- arrange(dta, Total) %>% slice(1)
highshare <- arrange(dta, -Share) %>% slice(1)
lowshare <- arrange(dta, Share) %>% slice(1)
tribble(~var, ~mean, ~median, ~sd, ~high, ~low, ~avgshare, ~highshare, ~lowshare,
type, mean(dta$Total, na.rm=T),
median(dta$Total, na.rm=T),
sd(dta$Total, na.rm=T),
paste(high$Geography[1], "with", high$Total[1], "people.", sep = " "),
paste(low$Geography[1], "with", low$Total[1], "people.", sep = " "),
mean(dta$Share, na.rm=T),
paste0(highshare$Geography[1], " with ", lowshare$Share[1] * 100, "%."),
paste0(lowshare$Geography[1], " with ", lowshare$Share[1] * 100, "%.")
)
}
meta <- make_meta("Less than HS", dta)
meta
meta$low
meta$high
meta$avgshare
meta$lowshare
tribble(~var, ~mean, ~median, ~sd, ~high, ~low, ~avgshare, ~highshare, ~lowshare,
type, mean(dta$Total, na.rm=T),
median(dta$Total, na.rm=T),
sd(dta$Total, na.rm=T),
paste(high$Geography[1], "with", high$Total[1], "people.", sep = " "),
paste(low$Geography[1], "with", low$Total[1], "people.", sep = " "),
mean(dta$Share, na.rm=T),
paste0(highshare$Geography[1], " with ", round(lowshare$Share[1] * 100,2) "%."),
paste0(lowshare$Geography[1], " with ", round(lowshare$Share[1] * 100,2) "%.")
)
make_meta <- function(type, dta){
high <- arrange(dta, -Total) %>% slice(1)
low <- arrange(dta, Total) %>% slice(1)
highshare <- arrange(dta, -Share) %>% slice(1)
lowshare <- arrange(dta, Share) %>% slice(1)
tribble(~var, ~mean, ~median, ~sd, ~high, ~low, ~avgshare, ~highshare, ~lowshare,
type, mean(dta$Total, na.rm=T),
median(dta$Total, na.rm=T),
sd(dta$Total, na.rm=T),
paste(high$Geography[1], "with", high$Total[1], "people.", sep = " "),
paste(low$Geography[1], "with", low$Total[1], "people.", sep = " "),
mean(dta$Share, na.rm=T),
paste0(highshare$Geography[1], " with ", round(lowshare$Share[1] * 100,2), "%."),
paste0(lowshare$Geography[1], " with ", round(lowshare$Share[1] * 100,2), "%.")
)
}
meta <- make_meta("Less than HS", dta)
meta$lowshare
meta$avgshare
meta
fruits <- c("banana","raccoon","duck","grapefruit")
runApp(list(ui = pageWithSidebar(
headerPanel("Example"),
sidebarPanel(
sliderInput("index",
label = "Select a number",
min = 1,
max = 4,
step = 1,
value = 2)),
mainPanel(
htmlOutput("text")
)),
server = function(input, output) {
output$text <- renderUI({
fruits[input$index] <- paste("<b>",fruits[input$index],"</b>")
HTML(paste(fruits))
})
}
))
runApp()
runApp()
runApp()
runApp()
edu <- readRDS("dta/edu_national.RDS")
edu
runApp()
runApp()
rm(dta)
runApp()
topic_choices <- read_csv("ui_options.csv", col_types = "cccccc")
topic_choices
runApp()
runApp()
install.packages("ShinyJS")
install.packages("shinyjs")
library(shinyjs)
?useshinyjs
?useShinyjs
runApp()
runApp()
runApp()
?fluidRow
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?reorder
runApp()
runApp()
?reorder
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("tigris")
library(tigris)
cty <- counties()
library(sf)
cty <- cty %>% st_as_sf()
cty
readRDS("dta/edu_county.RDS")
keys <- readRDS("dta/edu_county.RDS") %>% select(GEOID, NAME)
cty
cty %>% select(GEOID)
cty %>% select(GEOID) %>% full_join(keys)
nrow(keys)
keys <- unique(keys)
keys
cty %>% select(GEOID) %>% full_join(keys)
cty %>% select(GEOID) %>% full_join(keys) %>% pull(GEOID) %>% unique %>% length()
cty <- cty %>% select(GEOID) %>% full_join(keys)
cty %>% st_simplify()
cty %>% st_simplify() %>% object.size()
cty %>% object.size()
?st_simplify
saveRDS(cty, "countymaps.RDS")
cty <- reaRDS("countymaps.RDS")
cty <- readRDS("countymaps.RDS")
dta
dta_load
edu
cty
state <- states()
state
state <- st_as_sf(state) %>% st_simplify
state <- state %>% select(GEOID)
edu <- readRDS("dta/edu_state.RDS")
state <- state %>% left_join(state, unique(select(edu, GEOID, NAME)))
state <- state %>% left_join(edu, unique(select(edu, GEOID, NAME)))
state <- state %>% left_join(unique(select(edu, GEOID, NAME)))
state
saveRDS("statemaps.RDS")
saveRDS(state , "statemaps.RDS")
districts <- congressional_districts()
districts <- st_as_sf(districts) %>% st_simplify
districts
edu <- readRDS("dta/edu_district.RDS")
edu
edu <- unique(select(edu, GEOID, NAME))
districts <- left_join(districts, edu)
districts
districts %>% select(NAME)
districts %>% select(NAME) %>% saveRDS("districtmaps.RDS")
topic_choices <- read_csv("ui_options.csv", col_types = "cccccc")
cty <- readRDS("countymaps.RDS")
states <- readRDS("statemaps.RDS")
districts <- readRDS("districtmaps.RDS")
runApp()
runApp()
runApp()
?updateSelectizeInput
runApp()
runApp()
runApp()
runApp()
if (interactive()) {
ui <- fluidPage(sidebarLayout(
sidebarPanel(
sliderInput("controller", "Controller", 1, 3, 1)
),
mainPanel(
tabsetPanel(id = "inTabset",
tabPanel(title = "Panel 1", value = "panel1", "Panel 1 content"),
tabPanel(title = "Panel 2", value = "panel2", "Panel 2 content"),
tabPanel(title = "Panel 3", value = "panel3", "Panel 3 content")
)
)
))
server <- function(input, output, session) {
observeEvent(input$controller, {
updateTabsetPanel(session, "inTabset",
selected = paste0("panel", input$controller)
)
})
}
shinyApp(ui, server)
}
runApp()
